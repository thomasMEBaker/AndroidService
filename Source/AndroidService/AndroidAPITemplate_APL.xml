<?xml version="1.0" encoding="utf-8"?>

<root xmlns:android="http://schemas.android.com/apk/res/android">
  <!-- init section is always evaluated once per architecture -->
  <trace enable="true"/>
  <init>
    <log text="AndroidAPITemplate init"/>
  </init>

  <androidManifestUpdates>
    <addElements tag="application">

      <activity android:name="com.isaratech.androidapi.AndroidAPITemplateActivity"
            android:configChanges="keyboard|keyboardHidden|screenLayout|screenSize|orientation"
            android:label="@string/app_name" />

    </addElements>


  </androidManifestUpdates>


  <!-- optional additions to proguard -->
  <proguardAdditions>
    <insert>
      <![CDATA[
      -keepattributes Signature
      -dontskipnonpubliclibraryclassmembers

     -keepclassmembers class com.epicgames.ue4.GameActivity {
            public <methods>;
            public <fields>;
     }
    ]]>
    </insert>
  </proguardAdditions>

  <resourceCopies>
    <!-- Copy the generated resource file to be packaged -->
  </resourceCopies>

  <AARImports>
  </AARImports>

  <!-- optional additions to the GameActivity imports in GameActivity.java -->
  <gameActivityImportAdditions>
    <insert>
      import java.util.HashSet;
      import java.util.Arrays;
      import android.text.TextUtils;
      import android.graphics.BitmapFactory;
      import android.os.Handler;
      import android.widget.Toast;
      import android.content.Context;
      import android.util.Log;
      import java.util.Set;
      import java.util.UUID;

      import android.content.ComponentName;

      import android.provider.MediaStore;
      import android.provider.MediaStore.Video.Thumbnails;
      import android.provider.DocumentsContract;
      import java.util.concurrent.TimeUnit;
      import android.database.Cursor;
      import android.content.CursorLoader;

      import android.content.ContentUris;
      import android.annotation.SuppressLint;

      import android.graphics.Bitmap;
      import android.media.ThumbnailUtils;
      import android.graphics.BitmapFactory;

      import java.net.MalformedURLException;
      import java.net.URI;
      import java.net.URISyntaxException;
      import java.net.URL;
      import java.util.ArrayList;

      import android.content.ComponentName;
      import android.app.Service;
      import android.content.Intent;
      import android.content.ServiceConnection;
      import android.os.IBinder;
      import android.util.Log;

    </insert>
  </gameActivityImportAdditions>


  <!-- optional additions to the GameActivity class in GameActivity.java -->
  <gameActivityClassAdditions>
    <insert>
      <![CDATA[
	  
	  private static final String TAG = "NativeAndroidPlugin";
	  public static Context context;
    ServiceConnect cnt;
    
    class ServiceConnect{
        private ServiceConnection serviceConn;
				private IBinder mServiceBinding;
				private Context cnxt;
        
        public ServiceConnect(Context applicationContext) {
					cnxt = applicationContext;
				}
        
        public void initalise(){
					serviceConn=new ServiceConnection() {
            @Override
            public void onServiceConnected(ComponentName name, IBinder service) {
                //Log.d("SERVICEREMOTE","CONNECTED");
                mServiceBinding=service;
            }
            
            @Override
            public void onServiceDisconnected(ComponentName name) {
                //Log.d("SERVICEREMOTE","DISCONNECTED");
                mServiceBinding=null;
            }        
            };
            
            Intent launchIntent=new Intent();
						launchIntent.setComponent(new ComponentName("com.myhexaville.androidwebrtc","com.shivam.androidwebrtc.tutorial.HeadsetRecordService"));
						cnxt.bindService(launchIntent, serviceConn, Context.BIND_AUTO_CREATE);
    }
    
				public void destroyService(){
					 if(serviceConn!=null) {
							cnxt.unbindService(serviceConn);
							serviceConn=null;
           }
        }
    }
    

   
   
		public void AndroidAPI_ShowToast(final String toast) {
			runOnUiThread(new Runnable() {
				public void run() {
					CharSequence cs = toast;
					Toast.makeText(getApplicationContext(), cs, Toast.LENGTH_LONG).show();
					}
				});
				}
        

		
	public void AndroidAPI_InitService(){
        cnt = new ServiceConnect(getApplicationContext());
        cnt.initalise();
		}
    
   public void AndroidAPI_DestroyService(){
        cnt.destroyService();
		}          
    
		]]>
    </insert>
  </gameActivityClassAdditions>

  <!-- optional additions to GameActivity ReadMETADATA metadata reading in GameActivity.java -->
  <gameActivityReadMetadataAdditions>
    <insert>

    </insert>
  </gameActivityReadMetadataAdditions>

  <!-- optional additions to GameActivity onCreate in GameActivity.java -->
  <gameActivityOnCreateAdditions>
    <insert>
      <![CDATA[
		]]>
    </insert>
  </gameActivityOnCreateAdditions>

  <!-- optional additions to GameActivity onDestroy in GameActivity.java -->
  <gameActivityOnDestroyAdditions>
    <insert>

    </insert>
  </gameActivityOnDestroyAdditions>


  <!-- optional additions to GameActivity onStart in GameActivity.java -->
  <gameActivityOnStartAdditions>
    <insert>

    </insert>
  </gameActivityOnStartAdditions>

  <!-- optional additions to GameActivity onStop in GameActivity.java -->
  <gameActivityOnStopAdditions>
    <insert>

    </insert>
  </gameActivityOnStopAdditions>


  <!-- optional additions to GameActivity onPause in GameActivity.java	-->
  <gameActivityOnPauseAdditions>
    <insert>
      <![CDATA[
    ]]>
    </insert>
  </gameActivityOnPauseAdditions>


  <!-- optional additions to GameActivity onResume in GameActivity.java	-->
  <gameActivityOnResumeAdditions>
    <insert>
    </insert>
  </gameActivityOnResumeAdditions>


  <!-- optional additions to GameActivity onActivityResult in GameActivity.java -->
  <gameActivityOnActivityResultAdditions>
    <insert>
    </insert>
  </gameActivityOnActivityResultAdditions>


  <!-- optional libraries to load in GameActivity.java before libUE4.so -->
  <soLoadLibrary>
    <!-- need this if plugin enabled and supported architecture, even if not packaged for GearVR -->
  </soLoadLibrary>
</root>
